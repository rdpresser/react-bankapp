// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReactBank.Infra.Data.Context;

#nullable disable

namespace ReactBank.Infra.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ReactBank.Domain.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccountNumber");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CustomerId");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba669725-8233-434a-9b1e-751dd752e419"),
                            AccountNumber = "123456789",
                            AccountType = "Checking Account",
                            Balance = 1000m,
                            CreatedAt = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Currency = "US$",
                            CustomerId = new Guid("849b24e4-f29a-4fb4-91b7-7a9b65795bf6"),
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("ba769725-8233-434a-9b1e-751dd752e419"),
                            AccountNumber = "923456789",
                            AccountType = "Saving Account",
                            Balance = 900m,
                            CreatedAt = new DateTime(2020, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Currency = "US$",
                            CustomerId = new Guid("889b24e4-f29a-4fb4-91b7-7a9b65795bf6"),
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("ba869725-8233-434a-9b1e-751dd752e419"),
                            AccountNumber = "823456789",
                            AccountType = "Student Account",
                            Balance = 850m,
                            CreatedAt = new DateTime(2023, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Currency = "US$",
                            CustomerId = new Guid("888b24e4-f29a-4fb4-91b7-7a9b65795bf6"),
                            IsActive = false
                        });
                });

            modelBuilder.Entity("ReactBank.Domain.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("IdentityDocument")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("State")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Name");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            Id = new Guid("849b24e4-f29a-4fb4-91b7-7a9b65795bf6"),
                            City = "New York",
                            DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@gmail.com",
                            IdentityDocument = "123456789",
                            IsActive = true,
                            Name = "John Doe",
                            Phone = "123456789",
                            State = "NY",
                            StreetAddress = "123 Main St",
                            ZipCode = "12345"
                        },
                        new
                        {
                            Id = new Guid("889b24e4-f29a-4fb4-91b7-7a9b65795bf6"),
                            City = "New York",
                            DateOfBirth = new DateTime(1980, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mary.doe@gmail.com",
                            IdentityDocument = "923456789",
                            IsActive = true,
                            Name = "Mary Doe",
                            Phone = "923456789",
                            State = "NY",
                            StreetAddress = "124 Main St",
                            ZipCode = "12346"
                        },
                        new
                        {
                            Id = new Guid("888b24e4-f29a-4fb4-91b7-7a9b65795bf6"),
                            City = "New York",
                            DateOfBirth = new DateTime(1995, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "son.doe@gmail.com",
                            IdentityDocument = "823456789",
                            IsActive = false,
                            Name = "Son Doe",
                            Phone = "823456789",
                            State = "NY",
                            StreetAddress = "125 Main St",
                            ZipCode = "12347"
                        });
                });

            modelBuilder.Entity("ReactBank.Domain.Models.Loan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Loan");
                });

            modelBuilder.Entity("ReactBank.Domain.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DestinationAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SourceAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("DateTime");

                    b.HasIndex("DestinationAccountId");

                    b.HasIndex("SourceAccountId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("ReactBank.Domain.Models.Account", b =>
                {
                    b.HasOne("ReactBank.Domain.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ReactBank.Domain.Models.Loan", b =>
                {
                    b.HasOne("ReactBank.Domain.Models.Account", "Account")
                        .WithMany("Loans")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ReactBank.Domain.Models.Transaction", b =>
                {
                    b.HasOne("ReactBank.Domain.Models.Account", "DestinationAccount")
                        .WithMany()
                        .HasForeignKey("DestinationAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReactBank.Domain.Models.Account", "SourceAccount")
                        .WithMany("Transactions")
                        .HasForeignKey("SourceAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DestinationAccount");

                    b.Navigation("SourceAccount");
                });

            modelBuilder.Entity("ReactBank.Domain.Models.Account", b =>
                {
                    b.Navigation("Loans");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
